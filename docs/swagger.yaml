basePath: /v1
definitions:
  ErrorResponse:
    description: Error response object
    properties:
      error:
        example: message
        type: string
    type: object
  ListPairs:
    description: Request list of trading pairs
    properties:
      pairs:
        description: list of trade pools
        items:
          $ref: '#/definitions/entities.TradePair'
        type: array
    type: object
  ListPools:
    description: Request list of trading pools
    properties:
      pools:
        description: list of trade pools
        items:
          $ref: '#/definitions/entities.Pool'
        type: array
    type: object
  ListProtocols:
    description: Request list of protocols
    properties:
      protocols:
        description: list of protocols
        items:
          $ref: '#/definitions/entities.SwapProtocol'
        type: array
    type: object
  RequestPairs:
    description: Request for searching trade pair
    properties:
      protocol:
        allOf:
        - $ref: '#/definitions/entities.SwapProtocol'
        description: trade protocol
      tokenPair:
        allOf:
        - $ref: '#/definitions/entities.TokenPair'
        description: pair of tokens
    type: object
  Response:
    description: Response object
    properties:
      body:
        description: returned data
    type: object
  TokenList:
    description: Request list of tokens
    properties:
      tokens:
        description: list of tokens
        items:
          $ref: '#/definitions/entities.Token'
        type: array
    type: object
  entities.Pool:
    properties:
      address:
        type: string
      id:
        type: integer
      pair:
        $ref: '#/definitions/entities.TokenPair'
      protocol:
        $ref: '#/definitions/entities.SwapProtocol'
    type: object
  entities.SwapProtocol:
    properties:
      factory:
        type: string
      id:
        type: integer
      name:
        type: string
      router:
        type: string
    type: object
  entities.Token:
    properties:
      address:
        type: string
      id:
        type: integer
      name:
        type: string
      wei:
        type: integer
    type: object
  entities.TokenPair:
    properties:
      id:
        type: integer
      token0:
        $ref: '#/definitions/entities.Token'
      token1:
        $ref: '#/definitions/entities.Token'
    type: object
  entities.TradePair:
    properties:
      pool0:
        $ref: '#/definitions/entities.Pool'
      pool1:
        $ref: '#/definitions/entities.Pool'
    type: object
info:
  contact: {}
  description: interacting with smart contract, collecting tokens, perform trade
  license:
    name: MIT
  title: Flash Loan Arbitrage bot
  version: "1.0"
paths:
  /contract/pairs:
    get:
      consumes:
      - application/json
      description: Get full list of pairs from contract tradecase memory
      operationId: listPairs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListPairs'
      summary: List Pairs
      tags:
      - 'Contract: pairs'
    post:
      consumes:
      - application/json
      description: Add list of pairs to contract tradecase memory
      operationId: addPairs
      parameters:
      - description: Add pairs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ListPairs'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ListPairs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add Pairs
      tags:
      - 'Contract: pairs'
  /contract/pairs/find:
    post:
      consumes:
      - application/json
      description: Get list of pool pairs from contract tradecase memory by token
        pair & protocol
      operationId: getPairs
      parameters:
      - description: Get pairs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/RequestPairs'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListPairs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get Pairs
      tags:
      - 'Contract: pairs'
  /contract/tokens/base:
    get:
      consumes:
      - application/json
      description: Request base token list from deployed contract memory
      operationId: getTokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TokenList'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List base Tokens
      tags:
      - 'Trade: base tokens'
  /parser/core/parse:
    get:
      consumes:
      - application/json
      description: Parse and store to parser local memory
      operationId: parse
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListPools'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Parse
      tags:
      - 'Parse: core'
  /parser/core/parse-save:
    get:
      consumes:
      - application/json
      description: Save pools from parser to storage
      operationId: ParseWrite
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListPools'
        "507":
          description: Insufficient Storage
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Store parsed pools
      tags:
      - 'Parse: core'
  /parser/pools:
    get:
      consumes:
      - application/json
      description: Get pools from current parser
      operationId: getParsed
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListPools'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get parsed pools
      tags:
      - 'Parse: setup parser'
  /parser/protocols:
    delete:
      consumes:
      - application/json
      description: Remove parse protocols
      operationId: rmProtocols
      parameters:
      - description: Remove protocols
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ListProtocols'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/ListProtocols'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove protocols
      tags:
      - 'Parse: setup parser'
    get:
      consumes:
      - application/json
      description: Get current parse protocols
      operationId: getProtocols
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListProtocols'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get protocols
      tags:
      - 'Parse: setup parser'
    post:
      consumes:
      - application/json
      description: Add parse protocols
      operationId: addProtocols
      parameters:
      - description: Set protocol
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ListProtocols'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListProtocols'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add protocols
      tags:
      - 'Parse: setup parser'
  /provider/tokens:
    get:
      consumes:
      - application/json
      description: Request token list
      operationId: listTokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TokenList'
      summary: List Tokens
      tags:
      - 'Provider: tokens'
    post:
      consumes:
      - application/json
      description: Add list of tokens
      operationId: addTokens
      parameters:
      - description: Add tokens
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/TokenList'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/TokenList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add Tokens
      tags:
      - 'Provider: tokens'
  /replace-tx-add:
    post:
      consumes:
      - application/json
      description: Replace transaction by hash with add base token tx
      operationId: replaceTxAdd
      parameters:
      - description: Tx hash
        in: query
        name: hash
        required: true
        type: string
      - description: Token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Replace Tx with add base
      tags:
      - 'Trade: core'
  /replace-tx-rm:
    delete:
      consumes:
      - application/json
      description: Replace transaction by hash with remove base token tx
      operationId: replaceTxRm
      parameters:
      - description: Tx hash
        in: query
        name: hash
        required: true
        type: string
      - description: Token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Replace Tx with rm base token
      tags:
      - 'Trade: core'
  /storage/pools:
    delete:
      consumes:
      - application/json
      description: Delete pools from storage
      operationId: deletePools
      parameters:
      - description: Delete pools
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ListPools'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListPools'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "507":
          description: Insufficient Storage
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete Pools
      tags:
      - 'Storage: pools'
    get:
      consumes:
      - application/json
      description: Get list of all pools from storage
      operationId: getPoolList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListPools'
        "507":
          description: Insufficient Storage
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get Pools
      tags:
      - 'Storage: pools'
    post:
      consumes:
      - application/json
      description: Add list of pools to storage
      operationId: addPools
      parameters:
      - description: Add pools
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ListPools'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ListPools'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "507":
          description: Insufficient Storage
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add Pools
      tags:
      - 'Storage: pools'
  /storage/tokens:
    delete:
      consumes:
      - application/json
      description: Delete tokens from storage
      operationId: deleteTokens
      parameters:
      - description: Delete tokens
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/TokenList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TokenList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "507":
          description: Insufficient Storage
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete Tokens
      tags:
      - 'Storage: tokens'
    get:
      consumes:
      - application/json
      description: Get list of all tokens from storage
      operationId: getTokensList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TokenList'
        "507":
          description: Insufficient Storage
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get Tokens
      tags:
      - 'Storage: tokens'
    post:
      consumes:
      - application/json
      description: Add list of tokens to storage
      operationId: storeTokens
      parameters:
      - description: Add tokens
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/TokenList'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/TokenList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "507":
          description: Insufficient Storage
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add Tokens
      tags:
      - 'Storage: tokens'
  /trade/core/flash-arbitrage:
    get:
      consumes:
      - application/json
      description: Call flash arbitrage func from contract with give pools
      operationId: doArbitrage
      parameters:
      - description: Swap pool 0
        in: query
        name: pool0
        required: true
        type: string
      - description: Swap pool 1
        in: query
        name: pool1
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: DoArbitrage
      tags:
      - 'Trade: core'
  /trade/core/profit-check:
    get:
      consumes:
      - application/json
      description: Find out if trade with given pools is profitable
      operationId: checkProfit
      parameters:
      - description: Swap pool 0
        in: query
        name: pool0
        required: true
        type: string
      - description: Swap pool 1
        in: query
        name: pool1
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/Response'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: CheckProfit
      tags:
      - 'Trade: core'
  /trade/core/withdraw:
    get:
      consumes:
      - application/json
      description: Withdraw tokens from contract
      operationId: withdraw
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/Response'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Withdraw
      tags:
      - 'Trade: core'
  /trade/pairs:
    get:
      consumes:
      - application/json
      description: Load profitable pool pairs from storage
      operationId: loadPairs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListPairs'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Load Pairs
      tags:
      - 'Trade: setup case'
  /trade/tokens:
    get:
      consumes:
      - application/json
      description: Load unknown tokens from storage
      operationId: loadTokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TokenList'
        "507":
          description: Insufficient Storage
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Load Tokens
      tags:
      - 'Trade: setup case'
  /trade/tokens/base:
    delete:
      consumes:
      - application/json
      description: Remove base token from contract
      operationId: rmBase
      parameters:
      - description: Remove base token
        in: query
        name: token
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/Response'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove Base Token
      tags:
      - 'Trade: base tokens'
    post:
      consumes:
      - application/json
      description: Add base token to contract
      operationId: addBase
      parameters:
      - description: Add base token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Response'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add Base Token
      tags:
      - 'Trade: base tokens'
swagger: "2.0"
